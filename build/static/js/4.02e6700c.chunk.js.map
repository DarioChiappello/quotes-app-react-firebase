{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.02e6700c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1ayZU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__sPyf6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__fVAfR\",\"loading\":\"NewCommentForm_loading__1T4KU\",\"control\":\"NewCommentForm_control__3eFGt\",\"actions\":\"NewCommentForm_actions__1Tif5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__Gv1qa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__SQsD-\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n\n    // send comment to server\n    sendRequest({commentData :{text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' &&\n        <div>\n          <LoadingSpinner />\n        </div>\n      }\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const {sendRequest, status, data: loadedComments, } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if(status === 'pending'){\n    comments = (\n    <div className='centered'>\n      <LoadingSpinner />\n    </div>\n    );\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0 )){\n    comments = <CommentsList comments={loadedComments} />\n  }\n  \n  if(status === 'completed' && (!loadedComments || loadedComments.length ===0 )){\n    comments = <p className='centered'>No comments were added yet</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\n\r\n\r\nconst QuoteDetail = () => {\r\n\r\n    const match = useRouteMatch();\r\n\r\n    const params = useParams();\r\n\r\n    const { quoteId } = params;\r\n\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if(status === 'pending'){\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(error){\r\n        return <p className='centered focused'>{error}</p>\r\n    }\r\n\r\n\r\n    if(!loadedQuote.text){\r\n        return (\r\n            <div className=\"centered\">\r\n                <p>Page not found!</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            <Route path={match.path} exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}